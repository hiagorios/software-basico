add esp,12 | 83 c4 0c | 3
add esp,16 | 83 c4 10 | 3
add al, '0' | 04 30 | 2
cmp eax,0x0 | 83 f8 00 | 3
dec eax | 48 | 1
jle fim | 0f 8e aa 00 00 00 | 6
jmp fim | eb 6e | 2
mov ebp,esp | 89 e5 | 2
mov eax, promptDiscos | b8 00 00 00 00 | 5
mov eax, qntDiscos | b8 00 00 00 00 | 5
mov ebx, 4 | bb 04 00 00 00 | 5
mov [qntDiscos], eax | a3 00 00 00 00 | 5
mov eax, promptOrigem | b8 20 00 00 00 | 5
mov eax, pinoOrigem | b8 04 00 00 00 | 5
mov [pinoOrigem], eax | a3 04 00 00 00 | 5
mov eax, promptDestino | b8 4a 00 00 00 | 5
mov eax, pinoDestino | b8 0c 00 00 00 | 5
mov [pinoDestino], eax | a3 0c 00 00 00 | 5
mov ecx, [pinoOrigem] | 8b 0d 04 00 00 00 | 6
mov ebx, [pinoDestino] | 8b 1d 0c 00 00 00 | 6
mov eax, showAuxiliar | b8 3a 00 00 00 | 5
mov eax, ecx | 89 c8 | 2
mov ecx, 6 | b9 06 00 00 00 | 5
mov eax,[ebp+8] | 8b 45 08 | 3
mov [pinoAuxiliar], eax | a3 08 00 00 00 | 5
mov [origem], al | a2 83 00 00 00 | 5
mov eax, [ebp+16] | 8b 45 10 | 3
mov esp,ebp | 89 ec | 2
mov [destino], al | a2 8a 00 00 00 | 5
mov eax, [ebp+12] | 8b 45 0c | 3
mov eax, outputMovimentos | b8 6f 00 00 00 | 5
pop ebp | 5d | 1
push dword [pinoAuxiliar] | ff 35 08 00 00 00 | 6
push dword [pinoDestino] | ff 35 0c 00 00 00 | 6
push dword [pinoOrigem] | ff 35 04 00 00 00 | 6
push dword [qntDiscos] | ff 35 00 00 00 00 | 6
push dword [ebp+16] | ff 75 10 | 3
push dword [ebp+20] | ff 75 14 | 3
push dword [ebp+12] | ff 75 0c | 3
push ebp | 55 | 1
push dword eax | 50 | 1
push dword [ebp+8] | ff 75 08 | 3
ret | c3 | 1
sub ecx, eax | 29 c1 | 2
sub ecx, ebx | 29 d9 | 2

mov eax, 1
mov ebx, 0
int 0x80
mov ebx, STD_IN
mov eax, SYS_READ
push ebx
mov ebx, eax
cmp byte [eax], 0
jz .finished
inc eax
jmp .nextchar
sub eax, ebx
pop ebx
ret
push edx
push ecx
push eax
call stringLen
mov edx, eax
pop eax
mov ecx, eax
mov ebx, 1
mov eax, 4
int 80h
pop ecx
pop edx
call stringPrint
mov eax, 0Ah
mov eax, esp
push esi
mov ecx, 0
inc ecx
mov edx, 0
mov esi, 10
idiv esi
add edx, 48
cmp eax, 0
jnz .divideLoop
dec ecx
cmp ecx, 0
jnz .printLoop
pop esi
call intPrint
mov esi, eax
mov eax, 0
xor ebx, ebx
mov bl, [esi+ecx]
cmp bl, 48
jl .finished
cmp bl, 57
jg .finished
sub bl, 48
add eax, ebx
mov ebx, 10
mul ebx
jmp .multiplyLoop
div ebx
mov edx, ebx